<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="true"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.15"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="20.0"/>
  <arg name="method" default="fast"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Unreal Routine arguments -->
  <arg name="delay" default="3.0"/>  
  
  <!-- Odometry  arguments (random_walk, ground_truth)-->
  <arg name="use_rovio" default="false"/>
  <arg name="odom_noise_model" default="random_walk"/>
  
  <!--  Planner arguments (can use a single config or compose the planner)-->
  <arg name="use_separate_configs" default="false"/>
  <arg name="planner_config" default="planners/example_config.yaml"/>
  <arg name="verbose_planner" default="true"/>
  <arg name="visualize" default="true"/>
  
  <!--  Experiment arguments -->  
  <arg name="experiment_config" default="CityBuilding.yaml"/>
  <arg name="record_data" default="true"/>
  <arg name="record_visualization" default="true"/>
  <arg name="data_directory" default="/home/mason/Documents/Data"/> 
  <arg name="data_frequency" default="30.0" />
  <arg name="time_limit" default="30" />


  <!-- *** Experiment Execution *** -->
  
  <!-- Setup experiment params, data, nodes -->
  <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/experiments/$(arg experiment_config)"/>

  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/powerplant.world" />
    <arg name="debug" value="false" />
    <arg name="paused" value="false" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
  </include>

  <group ns="$(arg mav_name)">
    <!-- Setup a mav -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/firefly_vi_sensor.gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="1.0" />
    </include>
    
    <!-- MPC trajectory tracker (0.0021 sampling time needs to match odom publish rate!)-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.0021"/>
    </node>
    
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- Odometry: noise model / rovio -->
    <node name="odometry_noise_model" pkg="active_3d_planning_app_reconstruction" type="gps_odometry_simulator.py" output="screen">
      <param name="position_uncertainty" value="0.05"/>
      <param name="roll_pitch_uncertainty" value="1.5" />
      <param name="yaw_uncertainty" value="5.0" />
      <param name="noise_model" value="$(arg odom_noise_model)" />
      <param name="publish_tf" value="true" />
      <remap from="odometry_in" to="ground_truth/odometry" />
    </node> 

    <!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 firefly/vi_sensor/base_link firefly/vi_sensor/camera_depth_optical_center_link 100"/>  
  </group>

  <group ns="unreal">
    <!-- Experiment launcher, data generation-->
    <node name="eval_data_node" pkg="active_3d_planning_app_reconstruction" type="eval_data_node_no_unreal.py" output="screen" required="true">
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
      <remap from="unreal_simulation_ready" to="simulation_manager/simulation_ready" />
      <remap from="collision" to="unreal_ros_client/collision" />
      <param name="ns_planner" value="/planner/planner_node" />
      <param name="ns_voxblox" value="/planner/voxblox_node" />
      <param name="delay" value="$(arg delay)" />
      <param name="startup_timeout" value="30.0" />
      <param name="evaluate" value="$(arg record_data)" />
      <param name="eval_directory" value="$(arg data_directory)" />
      <param name="eval_frequency" value="$(arg data_frequency)" />
      <param name="time_limit" value="$(arg time_limit)" />
    </node>
    
    <!-- Record a rosbag of the visualization-->
    <node pkg="rosbag" type="record" name="rosbag_vis_recorder"
       args="record -o $(arg data_directory)/tmp_bags/tmp_bag /rosout /clock /tf /planner/voxblox_node/mesh /firefly/reference_trajectory /firefly/base_link /planner/trajectory_visualization" if="$(eval arg('record_data') and arg('record_visualization'))"/>
  </group>

  <group ns="planner">
    <!-- Voxblox -->
    <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
      <remap from="pointcloud" to="/firefly/vi_sensor/camera_depth/depth/points"/>
      <remap from="transform" to="/$(arg mav_name)/rovio/transform" if="$(arg use_rovio)"/>
      <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/voxblox/transforms.yaml" if="$(arg use_rovio)"/> 
      <param name="use_tf_transforms" value="$(eval arg('use_rovio') == false)"/>
      <param name="publish_tsdf_map" value="true" />
      <param name="publish_esdf_map" value="true" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="color_mode" value="color" />
      <param name="update_mesh_every_n_sec" value="1.0" />
      <param name="method" value="$(arg method)" />
      <param name="max_ray_length" value="$(arg ray_length)" />
      <param name="allow_clear" value="true" />
      <param name="verbose" value="$(arg verbose_voxblox)" />
      <param name="publish_map_incremental" value="true" />
    </node>
    
    <!-- Planner -->
    <node name="planner_node" pkg="active_3d_planning_app_reconstruction" type="reconstruction_planner_node" output="screen" >
      <remap from="planner_node/esdf_map_in" to="voxblox_node/esdf_map_out" />
      <remap from="planner_node/tsdf_map_in" to="voxblox_node/tsdf_map_out" />
      <param name="use_tf_transforms" value="false" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="update_mesh_every_n_sec" value="0.0" />   
      <param name="publish_traversable" value="false" />         
    
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />
      <param name="verbose" value="$(arg verbose_planner)" />
      <param name="visualize" value="$(arg visualize)" />
      <param name="log_performance" value="$(arg record_data)" />
    
      <!-- Experiment dependent -->
      <param name="trajectory_evaluator/bounding_volume_args" value="/target_bounding_volume" />
      <param name="trajectory_generator/bounding_volume_args" value="/map_bounding_volume" />
      
      <!-- Modular Config -->    
      <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/$(arg planner_config)"/>
    </node>    
   
 </group>

  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_experiment" pkg="rviz" args="-d $(find active_3d_planning_app_reconstruction)/cfg/experiments/experiment_visualization.rviz" if="$(arg visualize)"/>
</launch>
